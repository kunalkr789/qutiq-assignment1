{"version":3,"sources":["containers/list.js","actions/detailActions.js","containers/Details.js","App.js","serviceWorker.js","reducers/ListReducer.js","reducers/DetailsReducer.js","reducers/RootReducer.js","Store.js","index.js"],"names":["List","props","dispatch","useDispatch","list","useSelector","state","React","useEffect","FetchData","a","type","axios","get","result","payload","data","_","isEmpty","loading","errorMsg","map","e","className","key","id","to","first_name","last_name","Details","match","params","detailsState","GetDetails","user","src","avatar","email","App","path","exact","component","Boolean","window","location","hostname","DefaultState","ListReducer","action","DetailsReducer","RootReducer","combineReducers","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2081db09.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport _ from \"lodash\";\r\nimport { GetList } from \"../actions/detailActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst List = (props) => {\r\n  const dispatch = useDispatch();\r\n  const list = useSelector((state) => state.List);\r\n  React.useEffect(() => {\r\n    FetchData();\r\n  }, []);\r\n  const FetchData = () => {\r\n    dispatch(GetList());\r\n  };\r\n\r\n  const showData = () => {\r\n    if (!_.isEmpty(list.data)) {\r\n      return list.data.data.map((e) => {\r\n        return (\r\n          <div className=\"list-group\" key={e.id}>\r\n            <Link className=\"list-group-item\" to={`/details/${e.id}`}>\r\n              <p>\r\n                {e.first_name} {e.last_name}\r\n              </p>\r\n            </Link>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n    if (list.loading) {\r\n      return <p>loading...</p>;\r\n    }\r\n    if (list.errorMsg !== \"\") {\r\n      return <p>{list.errorMsg}</p>;\r\n    }\r\n    return <p>unable to get data</p>;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Users List:</h2>\r\n      {showData()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import axios from \"axios\";\r\n\r\nexport const GetList = (page) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: \"LIST_LOADING\",\r\n    });\r\n    const result = await axios.get(\"https://reqres.in/api/users?page=1\");\r\n\r\n    dispatch({\r\n      type: \"LIST_SUCCESS\",\r\n      payload: result.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: \"LIST_FAIL\",\r\n    });\r\n  }\r\n};\r\n\r\nexport const GetDetails = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: \"DETAILS_LOADING\",\r\n    });\r\n    const result = await axios.get(\"https://reqres.in/api/users?page=1\");\r\n    dispatch({\r\n      type: \"DETAILS_SUCCESS\",\r\n      payload: result.data.data[id - 1],\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: \"DETAILS_FAIL\",\r\n    });\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { GetDetails } from \"../actions/detailActions\";\r\nimport _ from \"lodash\";\r\n\r\nconst Details = (props) => {\r\n  const id = props.match.params.id;\r\n  const dispatch = useDispatch();\r\n  const detailsState = useSelector((state) => state.Details);\r\n  React.useEffect(() => {\r\n    dispatch(GetDetails(id));\r\n  }, []);\r\n\r\n  const showData = () => {\r\n    if (!_.isEmpty(detailsState.data)) {\r\n      return (\r\n        <div className=\"user-card\" key={detailsState.data.user.id}>\r\n          <div className=\"content\">\r\n            <div className=\"left\">\r\n              <div>\r\n                <img className=\"user-img\" src={detailsState.data.user.avatar} />\r\n              </div>\r\n            </div>\r\n            <div className=\"right\">\r\n              <h6 className=\"card-title\">\r\n                Name: {detailsState.data.user.first_name}{\" \"}\r\n                {detailsState.data.user.last_name}\r\n              </h6>\r\n\r\n              <h6>\r\n                Email:{\" \"}\r\n                <small className=\"card-text\">\r\n                  {detailsState.data.user.email}\r\n                </small>\r\n              </h6>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (detailsState.loading) {\r\n      return <p>loading...</p>;\r\n    }\r\n    if (detailsState.errorMsg !== \"\") {\r\n      return <p>{detailsState.errorMsg}</p>;\r\n    }\r\n    return <p>error getting details</p>;\r\n  };\r\n  return <div>{showData()}</div>;\r\n};\r\n\r\nexport default Details;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, NavLink, Redirect } from \"react-router-dom\";\nimport List from \"./containers/list\";\nimport Details from \"./containers/Details\";\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <Switch>\n        <Route path={\"/\"} exact component={List} />\n        <Route path={\"/details/:id\"} exact component={Details} />\n        <Redirect to={\"/\"} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const DefaultState = {\r\n  loading: false,\r\n  data: [],\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst ListReducer = (state = DefaultState, action) => {\r\n  switch (action.type) {\r\n    case \"LIST_LOADING\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"LIST_FAIL\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errorMsg: \"unable to get list\",\r\n      };\r\n    case \"LIST_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: action.payload,\r\n        errorMsg: \"\",\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ListReducer;\r\n","const DefaultState = {\r\n  loading: false,\r\n  data: {},\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst DetailsReducer = (state = DefaultState, action) => {\r\n  switch (action.type) {\r\n    case \"DETAILS_LOADING\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"DETAILS_FAIL\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errorMsg: \"unable to find\",\r\n      };\r\n    case \"DETAILS_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errorMsg: \"\",\r\n        data: {\r\n          ...state.data,\r\n          user: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default DetailsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport ListReducer from \"./ListReducer\";\r\nimport DetailsReducer from \"./DetailsReducer\";\r\n\r\nconst RootReducer = combineReducers({\r\n  List: ListReducer,\r\n  Details: DetailsReducer,\r\n});\r\n\r\nexport default RootReducer;\r\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport RootReducer from \"./reducers/RootReducer\";\r\n\r\nconst Store = createStore(\r\n  RootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./Store\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={Store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}